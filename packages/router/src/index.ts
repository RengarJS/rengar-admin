import fs from 'fs'
import path from 'path'
import type { Plugin } from 'vite'
import type { Option } from './types'

interface TreeNode {
  path: string
  name: string
  children?: TreeNode[]
}

export function vitePluginRoutes(option: Option): Plugin {
  const { entry, output } = option
  const root = process.cwd()
  const viewsDir = path.resolve(root, entry)
  const outputFile = path.resolve(root, output)

  return {
    name: 'vite-plugin-routes',
    async buildStart() {
      try {
        const tree = generateDirectoryTree(viewsDir, viewsDir)
        const routes = generateRoutes(tree)
        const routesContent = `// Auto-generated by vite-plugin-generate-routes
export const routes = ${JSON.stringify(routes, null, 2)}`
        fs.writeFileSync(outputFile, routesContent)
      } catch (error) {
        console.error('Error generating routes:', error)
      }
    }
  }
}

function generateDirectoryTree(dir: string, viewsDir: string): TreeNode[] {
  const result: TreeNode[] = []
  const files = fs.readdirSync(dir, { withFileTypes: true })

  for (const file of files) {
    if (file.name.startsWith('.')) continue

    const fullPath = path.join(dir, file.name)
    const relativePath = path.relative(viewsDir, fullPath)
    const routePath = '/' + relativePath.split(path.sep).join('/')
    const routeName = relativePath
      .replace(/\.vue$/, '')
      .split(path.sep)
      .join('-')

    if (file.isDirectory()) {
      const children = generateDirectoryTree(fullPath, viewsDir)
      if (children.length > 0) {
        result.push({
          path: routePath,
          name: routeName,
          children
        })
      }
    } else if (file.name === 'index.vue' || (file.name.startsWith('[') && file.name.endsWith('].vue'))) {
      result.push({
        path: file.name === 'index.vue' ? routePath.replace(/\/index\.vue$/, '') : routePath.replace(/\.vue$/, ''),
        name: routeName,
        component: `() => import('@/views/${relativePath}')`
      })
    }
  }

  return result
}

function generateRoutes(tree: TreeNode[]): any[] {
  return tree.map((node) => {
    const route: any = {
      path: node.path,
      name: node.name,
      component: node.component
    }

    if (node.children && node.children.length > 0) {
      route.children = generateRoutes(node.children)
    }

    return route
  })
}
